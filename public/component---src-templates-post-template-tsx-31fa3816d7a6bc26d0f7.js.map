{"version":3,"file":"component---src-templates-post-template-tsx-31fa3816d7a6bc26d0f7.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/PostContent.tsx/index.tsx","webpack://gatsby-starter-default/./src/components/PostHead/index.tsx","webpack://gatsby-starter-default/./src/components/Comment/index.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["// 게시글 본문\nimport React from 'react'\nimport { Link } from 'gatsby'\n\nimport styled from 'styled-components'\nimport './md.css'\n\nimport { useRecoilValue } from 'recoil'\nimport { toggleThemeAtom } from 'etc/atoms'\n\ninterface PostContentProps {\n  html: string\n  categories?: string[]\n  page: string\n}\n\nexport default function PostContent({\n  html,\n  categories,\n  page,\n}: PostContentProps) {\n  const isDark = useRecoilValue(toggleThemeAtom)\n\n  return (\n    <>\n      <ContentContainer>\n        <Content\n          dangerouslySetInnerHTML={{ __html: html }}\n          className={\n            isDark\n              ? 'markdown-body markdown-dark'\n              : 'markdown-body markdown-light'\n          }\n        />\n      </ContentContainer>\n\n      {page === 'project' ? (\n        <>\n          <Prev to={`/project`}>목록 보기</Prev>\n        </>\n      ) : (\n        <>\n          <CategoryContainer>\n            <CategoryList>\n              {categories?.map((categorie, idx) => (\n                <CategoryItem key={idx}>{categorie}</CategoryItem>\n              ))}\n            </CategoryList>\n          </CategoryContainer>\n\n          <Prev to={`/tech-blog`}>목록 보기</Prev>\n        </>\n      )}\n    </>\n  )\n}\n\nconst Prev = styled(Link)`\n  display: block;\n  width: 150px;\n  margin: 120px auto 30px;\n  padding: 10px 9px;\n  border-radius: 30px;\n  background: ${props => props.theme.tabColor};\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 26px;\n  letter-spacing: -0.5px;\n  color: ${props => props.theme.textColor};\n  text-align: center;\n  cursor: pointer;\n  &:hover {\n    color: ${props => props.theme.bgColor};\n    background: ${props => props.theme.selectBoxColor};\n  }\n\n  @media screen and (min-width: 767px) {\n    width: 180px;\n    padding: 13px 24px;\n    font-size: 18px;\n    line-height: 28px;\n  }\n`\n\nconst CategoryItem = styled.div`\n  display: inline-block;\n  overflow: hidden;\n  max-width: 100%;\n  height: 34px;\n  margin-right: 6px;\n  padding: 0 15px;\n  border-radius: 34px;\n  font-size: 13px;\n  line-height: 34px;\n  color: ${props => props.theme.textColor};\n  background: ${props => props.theme.tabColor};\n  letter-spacing: -0.5px;\n  hite-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst CategoryList = styled.div`\n  text-align: center;\n`\n\nconst CategoryContainer = styled.div`\n  max-width: 364px;\n  margin: 110px auto 0;\n  padding: 0 24px;\n\n  @media screen and (min-width: 767px) {\n    max-width: 630px;\n  }\n\n  @media screen and (min-width: 1439px) {\n    max-width: 816px;\n  }\n`\n\nconst Content = styled.div`\n  max-width: 364px;\n  margin: 84px auto 0;\n  padding: 0 24px;\n\n  @media screen and (min-width: 767px) {\n    max-width: 630px;\n    margin-top: 120px;\n  }\n\n  @media screen and (min-width: 1439px) {\n    max-width: 816px;\n  }\n  color: ${props => props.theme.postContentColor};\n`\n\nconst ContentContainer = styled.div`\n  max-width: 364px;\n  margin: 84px auto 0;\n  padding: 0 24px;\n\n  @media screen and (min-width: 767px) {\n    max-width: 630px;\n    margin-top: 120px;\n  }\n\n  @media screen and (min-width: 1439px) {\n    max-width: 816px;\n  }\n`\n","// 게시글 상단\nimport React from 'react'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\n\nimport styled from 'styled-components'\n\ninterface PostHeadProps {\n  title: string\n  page: string\n  date?: string\n  gatsbyImageData?: IGatsbyImageData\n}\n\nexport default function PostHead({\n  title,\n  page,\n  date,\n  gatsbyImageData,\n}: PostHeadProps) {\n  return (\n    <>\n      {page === 'project' ? (\n        <PostHeadContainer>\n          <ImageWrapper>\n            {gatsbyImageData && <Img image={gatsbyImageData} alt=\"\" />}\n          </ImageWrapper>\n          <TitleWrapper>{title}</TitleWrapper>\n        </PostHeadContainer>\n      ) : (\n        <PostHeadContainer>\n          <DateWrapper>\n            <Date>{date}</Date>\n          </DateWrapper>\n          <TitleWrapper>{title}</TitleWrapper>\n        </PostHeadContainer>\n      )}\n    </>\n  )\n}\n\nconst Img = styled(GatsbyImage)`\n  width: 100%;\n  height: 223px;\n`\n\nconst ImageWrapper = styled.div``\n\nconst TitleWrapper = styled.p`\n  margin-top: 12px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1.38;\n\n  @media screen and (min-width: 767px) {\n    margin-top: 24px;\n    font-size: 42px;\n    line-height: 1.29;\n    letter-spacing: -0.8px;\n  }\n\n  @media screen and (min-width: 1439px) {\n    font-size: 46px;\n    line-height: 1.3;\n    letter-spacing: -1px;\n  }\n`\n\nconst Date = styled.span`\n  font-size: 13px;\n  color: ${props => props.theme.postDateColor};\n  letter-spacing: -0.2px;\n\n  @media screen and (min-width: 767px) {\n    font-size: 18px;\n    letter-spacing: -0.5px;\n  }\n`\n\nconst DateWrapper = styled.div`\n  line-height: 20px;\n`\n\nconst PostHeadContainer = styled.div`\n  max-width: 364px;\n  margin: 0 auto;\n  padding: 0 24px;\n  text-align: center;\n\n  @media screen and (min-width: 767px) {\n    max-width: 630px;\n    padding: 0;\n  }\n\n  @media screen and (min-width: 1439px) {\n    max-width: 816px;\n    padding: 0;\n  }\n`\n","import React, { createRef, useEffect } from 'react'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'wonjongjang/wonjongjang.github.io' // 자신 계정의 레포지토리로 설정\n\ninterface UtterancesAttributesType {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nexport default function CommentWidget() {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <div ref={element} />\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from 'components/Layout'\nimport PostHead from 'components/PostHead'\nimport PostContent from 'components/PostContent.tsx'\n\nimport { ItemType } from 'etc/types'\nimport CommentWidget from 'components/Comment'\n\ninterface PostTemplateProps {\n  location: {\n    href: string\n  }\n  data: {\n    allMarkdownRemark: {\n      edges: ItemType[]\n    }\n  }\n}\n\nexport default function PostTemplate({\n  location: { href },\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}: PostTemplateProps) {\n  const {\n    node: {\n      frontmatter: { title, page, date, categories, subTitle },\n      html,\n    },\n  } = edges[0]\n\n  return (\n    <Layout title={title} description={subTitle} url={href}>\n      <PostHead title={title} page={page} date={date} />\n      <PostContent html={html} categories={categories} page={page} />\n      <CommentWidget />\n    </Layout>\n  )\n}\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            page\n            categories\n            date(formatString: \"YYYY.MM.DD\")\n            title\n            subTitle\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostContent","html","categories","page","isDark","useRecoilValue","toggleThemeAtom","React","ContentContainer","Content","dangerouslySetInnerHTML","__html","className","Prev","to","CategoryContainer","CategoryList","map","categorie","idx","CategoryItem","key","styled","Link","props","theme","tabColor","textColor","bgColor","selectBoxColor","postContentColor","PostHead","title","date","gatsbyImageData","PostHeadContainer","ImageWrapper","Img","image","alt","TitleWrapper","DateWrapper","Date","GatsbyImage","postDateColor","CommentWidget","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","crossorigin","async","Object","entries","forEach","_ref","value","setAttribute","appendChild","ref","PostTemplate","location","href","data","allMarkdownRemark","edges","node","frontmatter","subTitle","Layout","description","url"],"sourceRoot":""}