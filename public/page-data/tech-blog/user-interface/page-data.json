{"componentChunkName":"component---src-templates-post-template-tsx","path":"/tech-blog/user-interface/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1>사용자 인터페이스(UI, User Interface)</h1>\n<p>사용자와 시스템 간의 상호작용이 원활하게 이뤄지도록 도와주는 장치/소프트웨어</p>\n<ul>\n<li>특징\n<ul>\n<li>소프트웨어 영역 중 변경이 가장 많이 발생</li>\n<li>사용자의 편리성, 가독성↑ → 작업시간↓, 업무 이해도↑</li>\n<li>최소한의 노력으로 원하는 결과 얻을 수 있게 함</li>\n<li>사용자 중심의 상호작용 가능</li>\n<li>수행 결과의 오류↓</li>\n<li>사용자의 막연한 작업 기능에 대해 구체적인 방법 제시</li>\n<li>정보 제공자와 공급자 간의 매개 역할 수행</li>\n<li>UI 설계하기 위해 소프트웨어 아키텍처 반드시 숙지 필요</li>\n</ul>\n</li>\n<li>구분\n<ul>\n<li>CLI(Command Line Interface) : 텍스트</li>\n<li>GUI(Graphical User Interface) : 마우스로 선택</li>\n<li>NUI(Natural User Interface) : 말/행동</li>\n<li>VUI(Voice User Interface) : 음성</li>\n<li>OUI(Organic User Interface) : 모든 사물과 사용자 간의 상호작용</li>\n</ul>\n</li>\n<li>기본 원칙\n<ul>\n<li>직관성 : 누구나 쉽게 이해하고 사용</li>\n<li>유효성 : 사용자의 목적을 정확하고 완벽하게 달성</li>\n<li>학습성 : 누구나 쉽게 배우고 익힘</li>\n<li>유연성 : 사용자 요구사항을 최대한 수용하고 실수 최소화</li>\n</ul>\n</li>\n<li>설계 지침\n<ul>\n<li>사용자 중심</li>\n<li>사용성</li>\n<li>일관성</li>\n<li>단순성</li>\n<li>결과 예측 가능</li>\n<li>가시성</li>\n<li>심미성</li>\n<li>표준화</li>\n<li>접근성</li>\n<li>명확성</li>\n<li>오류 발생 해결</li>\n</ul>\n</li>\n<li>개발 시스템의 기능\n<ul>\n<li>사용자의 입력 검증</li>\n<li>에러 처리 및 에러 메시지 표시</li>\n<li>도움 및 프롬프트 제공</li>\n</ul>\n</li>\n</ul>\n<h2>설계 도구</h2>\n<p>UI의 화면 구조/배치 등을 설계할 때 사용하는 도구</p>\n<ul>\n<li>종류\n<ul>\n<li>와이어프레임(Wireframe) : 기획 단계 초기에 제작. 뼈대</li>\n<li>목업(Mockup) : 와이어프레임보다 실제 화면과 유사. 정적인 형태</li>\n<li>스토리보드(Story Board) : 최종적으로 참고하는 작업 지침서</li>\n<li>프로토타입(Prototype) : 인터렉션 적용. 동적인 형태</li>\n<li>유스케이스(Use Case) : 사용자 요구사항</li>\n</ul>\n</li>\n</ul>","frontmatter":{"page":"tech-blog","categories":["Software-Design"],"date":"2023.02.20","title":"사용자 인터페이스(UI)","subTitle":null}}}]}},"pageContext":{"slug":"/tech-blog/user-interface/"}},"staticQueryHashes":[],"slicesMap":{}}