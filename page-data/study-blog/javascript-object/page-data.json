{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/javascript-object/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>자바스크립트를 구성하는 거의 모든 것 (원시 타입을 제외한 함수, 배열, 정규표현식 등)</p>\n<p>다양한 타입의 값을 하나의 단위로 구성한 복합적인 자료구조</p>\n<p>변경 가능한 값(mutable value)</p>\n<p>0개 이상의 프로퍼티로 구성된 집합</p>\n<p>프로퍼티와 메서드로 구성된 집합</p>\n<blockquote>\n<p><strong>프로퍼티(property)</strong> : 객체의 상태를 나타내는 값</p>\n<ul>\n<li>\n<p>키(key) : 빈 문자열을 포함한 모든 문자열 / symbol (예약어 X)</p>\n</li>\n<li>\n<p>값(value) : 사용할 수 있는 모든 값</p>\n</li>\n</ul>\n<p><strong>메서드(method)</strong> : 프로퍼티를 참조하고 조작할 수 있는 동작</p>\n</blockquote>\n<h1>얕은 복사와 깊은 복사</h1>\n<p>복사로 생성된 객체는 원본과는 다른 객체</p>\n<ul>\n<li>\n<p>얕은 복사(shallow copy): 한 단계까지만 복사하는 것 (객체에 중첩되어 있는 객체는 참조 값을 복사)</p>\n<ul>\n<li>\n<p>slice 메서드</p>\n</li>\n<li>\n<p>스프레드 문법</p>\n</li>\n<li>\n<p>Object.assign</p>\n</li>\n</ul>\n</li>\n<li>\n<p>깊은 복사(deep copy): 객체에 중첩되어 있는 객체까지 모두 복사하는 것 (완전한 복사본)</p>\n<ul>\n<li>Lodash 라이브러리의 cloneDeep 메서드</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 얕은 복사</span>\n<span class=\"token keyword\">const</span> c1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>o <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 스프레드 방법</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">===</span> o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">===</span> o<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 깊은 복사</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Lodash의 cloneDeep 방법</span>\n<span class=\"token keyword\">const</span> c2 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c2 <span class=\"token operator\">===</span> o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">===</span> o<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h1>불변성(immutability)</h1>\n<p>객체가 생성된 이후 그 상태를 변경할 수 없는 디자인 패턴</p>\n<p>레퍼런스를 참조한 다른 객체에서 객체를 변경하여 의도하지 않은 변경 발생 → 불변 객체로 대처</p>\n<h2>불변 데이터 패턴(immutable data pattern)</h2>\n<ul>\n<li>\n<p>객체의 방어적 복사(defensive copy) <code class=\"language-text\">Object.assign()</code></p>\n<p>완전한 deep copy X, 객체 내부의 객체는 shallow copy → 변경에 영향을 줌</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 타킷 객체로 소스 객체의 프로퍼티를 복사</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Copy</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { a: 1 }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> copy<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// Merge</span>\n<span class=\"token keyword\">const</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> o3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">,</span> o3<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merge<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { a: 1, b: 2, c: 3 }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { a: 1 }</span></code></pre></div>\n</li>\n<li>\n<p>불변 객체를 통한 객체 변경 방지 <code class=\"language-text\">Object.freeze()</code></p>\n<p>완전한 deep copy X, 객체 내부의 객체는 shallow copy → 변경에 영향을 줌</p>\n<p>재귀적으로 호출하여 중첩 객체까지 변경 불가능하게 가능 → deep freeze</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Won'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">'Seoul'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Kim'</span> <span class=\"token comment\">// 무시</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { name: 'Won', address: { city: 'Seoul' } }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// deep freeze</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepFreeze</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\n  props<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> prop <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> prop <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> prop <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">deepFreeze</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">deepFreeze</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Kim'</span> <span class=\"token comment\">// 무시</span>\nuser<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> <span class=\"token string\">'Busan'</span> <span class=\"token comment\">// 무시</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { name: 'Won', address: { city: 'Seoul' } }</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Immutable.js</code></p>\n<p>List, Stack, Map, OrderedMap, Set, OrderedSet, Record와 같은 영구 불변 데이터 구조를 제공</p>\n</li>\n</ul>\n<h1>참고</h1>\n<ul>\n<li><a href=\"https://poiemaweb.com/js-object\" target=\"_blank\" rel=\"nofollow\">PoiemaWeb</a></li>\n</ul>","frontmatter":{"page":"study-blog","categories":["JavaScript"],"date":"Invalid date","title":"객체(Object)","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/javascript-object/"}},"staticQueryHashes":[],"slicesMap":{}}