{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/javascript-function/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>일련의 과정을 문(statement)으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것</p>\n<p>필요할 때 여러번 호출 가능 → 코드의 재사용 → 유지보수 편의성 ↑, 코드 신뢰성 ↑</p>\n<p>일급 객체(first-class object)</p>\n<blockquote>\n<p><strong>일급 객체의 조건</strong></p>\n<ul>\n<li>\n<p>무명의 리터럴로 생성 가능 (런타임에 생성 가능)</p>\n</li>\n<li>\n<p>변수 또는 자료 구조에 저장 가능</p>\n</li>\n<li>\n<p>함수의 매개변수에 전달 가능</p>\n</li>\n<li>\n<p>함수의 반환값으로 사용 가능</p>\n</li>\n</ul>\n</blockquote>\n<h1>정의 방식</h1>\n<ul>\n<li>\n<p>함수 선언문(function declaration)</p>\n<p>function 키워드, 함수명, 매개변수, 몸체로 구성</p>\n<p>함수 호이스팅 발생 (자바스크립트 엔진이 스크립트 로딩 시점에 바로 초기화하고 이를 VO에 저장)</p>\n<blockquote>\n<p><strong>함수 호이스팅(function hoisting)</strong> : 함수가 정의되기 이전에 함수 호출 가능</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 내부적으로 자바스크립트 엔진이 기명 함수 표현식으로 변환</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 함수명으로 호출되는 듯 보이지만 사실은 변수명으로 호출된 것</span>\n<span class=\"token comment\">// 함수 선언문도 함수 표현식과 동일하게 함수 리터럴 방식으로 정의되는 것</span></code></pre></div>\n</li>\n<li>\n<p>함수 표현식(function expression)</p>\n<p>함수 리터럴 방식으로 정의하고 변수에 할당</p>\n<p>함수 호이스팅이 아닌 변수 호이스팅 발생 (스크립트 로딩 시점에 VO에 함수를 할당하지 않고 runtime에 해석된 후 실행)</p>\n<p>함수 선언문 대신 사용할 것을 권장 (함수 호이스팅은 함수를 호출하기 전에 반드시 함수를 선언해야 한다는 규칙을 무시)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 기명 함수 표현식(named function expression)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">s1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 익명 함수 표현식(anonymous function expression)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">s2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Function 생성자 함수</p>\n<p>함수 선언문/표현식 모두 Function 생성자 함수의 축약법(short-hand)</p>\n<p>일반적이거나 바람직하지 X</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>argN<span class=\"token punctuation\">,</span> functionBody<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return number * number'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span></code></pre></div>\n</li>\n<li>\n<p>화살표 함수(arrow function)</p>\n<p>ES6 도입</p>\n<p>항상 익명 함수로 정의</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7</span></code></pre></div>\n</li>\n</ul>\n<h1>매개변수(parameter)와 인수(argument)</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p1<span class=\"token punctuation\">,</span> p2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 매개변수 p1, p2에 전달 받은 인수 할당</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 undefined</span>\n\n  <span class=\"token comment\">// 함수는 호출될 때 매개변수 외에 arguments 객체와 this를 암묵적으로 전달 받음</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수에 인수 1 전달</span></code></pre></div>\n<ul>\n<li>\n<p>함수는 매개변수와 인수의 개수가 일치하는지 체크 X (에러 발생 X)</p>\n<ul>\n<li>\n<p>매개변수 > 인수 ⇒ 할당되지 않은 매개변수의 값은 undefined</p>\n</li>\n<li>\n<p>매개변수 &#x3C; 인수 ⇒ 초과된 인수는 무시됨 (arguments 객체의 프로퍼티로 보관)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>매개변수는 최대 3개 이상 넘지 않는 것을 권장</p>\n</li>\n</ul>\n<h1>arguments 객체</h1>\n<p>함수 호출 시 전달된 인수들의 정보를 담고 있는 순회 가능한 유사 배열 객체</p>\n<p>함수 내부에서 지역 변수처럼 사용</p>\n<p>가변 인자 함수 구현 시 유용</p>\n<h1>this</h1>\n<blockquote>\n<p><strong>Java의 this</strong></p>\n<p>인스턴스 자신(self)을 가리키는 참조변수</p>\n<p>주로 매개변수와 멤버변수 이름이 같을 경우 구분하기 위해 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n \n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 멤버변수</span>\n \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 매개변수</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 멤버변수 name = 매개변수 name</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n<p>자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable) → 프로퍼티/메서드 참조 가능</p>\n<p>this 바인딩(this가 가리키는 값)은 함수 호출 방식에 따라 동적으로 결정</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">함수 호출 방식</th>\n<th align=\"center\">this 바인딩</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">일반 함수 호출</td>\n<td align=\"center\">전역 객체 <code class=\"language-text\">window</code></td>\n</tr>\n<tr>\n<td align=\"center\">메서드 호출</td>\n<td align=\"center\">메서드를 호출한 객체 (메서드를 소유한 객체 X)</td>\n</tr>\n<tr>\n<td align=\"center\">생성자 함수 호출</td>\n<td align=\"center\">생성자 함수가 미래에 생성할 인스터스</td>\n</tr>\n<tr>\n<td align=\"center\">Function.prototype.apply/call/bind 메서드에 의한 간접 호출</td>\n<td align=\"center\">Function.prototype.apply/call/bind 메서드에 첫번째 인수로 전달한 객체</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 일반 함수 호출</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span>\n\n<span class=\"token comment\">// 2. 메서드 호출</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj</span>\n\n<span class=\"token comment\">// 3. 생성자 함수 호출</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo {}</span>\n\n<span class=\"token comment\">// 4. Function.prototype.apply/call/bind 메서드에 의한 간접 호출</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar</span></code></pre></div>\n<h1>참고</h1>\n<ul>\n<li><a href=\"https://poiemaweb.com/js-function\" target=\"_blank\" rel=\"nofollow\">PoiemaWeb</a></li>\n</ul>","frontmatter":{"page":"study-blog","categories":["JavaScript"],"date":"Invalid date","title":"함수(Function)","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/javascript-function/"}},"staticQueryHashes":[],"slicesMap":{}}