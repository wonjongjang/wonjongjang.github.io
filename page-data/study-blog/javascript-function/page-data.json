{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/javascript-function/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>어떤 작업을 수행하기 위해 필요한 문(statement)들의 집합을 정의한 코드 블록</p>\n<p>여러번 호출 가능 → 코드의 재사용</p>\n<p>일급 객체(First-class object)</p>\n<blockquote>\n<ul>\n<li>\n<p>일급 객체 특징</p>\n<ul>\n<li>\n<p>무명의 리터럴로 표현 가능</p>\n</li>\n<li>\n<p>변수 또는 자료 구조에 저장 가능</p>\n</li>\n<li>\n<p>함수의 파라미터로 전달 가능</p>\n</li>\n<li>\n<p>반환값(return value)으로 사용 가능</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1>정의 방식</h1>\n<ul>\n<li>\n<p>함수 선언문(Function declaration)</p>\n<p>function 키워드, 함수명, 매개변수, 몸체로 구성</p>\n<p>함수 호이스팅 발생 (자바스크립트 엔진이 스크립트 로딩 시점에 바로 초기화하고 이를 VO에 저장)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 내부적으로 자바스크립트 엔진이 기명 함수 표현식으로 변환</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 함수명으로 호출되는 듯 보이지만 사실은 변수명으로 호출된 것</span>\n<span class=\"token comment\">// 함수 선언문도 함수 표현식과 동일하게 함수 리터럴 방식으로 정의되는 것</span></code></pre></div>\n</li>\n<li>\n<p>함수 표현식(Function expression)</p>\n<p>함수 리터럴 방식으로 정의하고 변수에 할당</p>\n<p>함수 호이스팅이 아닌 변수 호이스팅 발생 (스크립트 로딩 시점에 \bVO에 함수를 할당하지 않고 runtime에 해석된 후 실행)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 기명 함수 표현식(named function expression)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">s1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 익명 함수 표현식(anonymous function expression)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">s2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Function 생성자 함수</p>\n<p>함수 선언문/표현식 모두 Function 생성자 함수의 축약법(short-hand)</p>\n<p>일반적으로 사용 X</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> argN<span class=\"token punctuation\">,</span> functionBody<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">const</span> square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return number * number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>\n</li>\n</ul>\n<blockquote>\n<p><strong>함수 호이스팅(Function hoisting)</strong> : 함수가 정의되기 이전에 함수 호출 가능</p>\n<p><strong>변수 객체(VO, Variable Object)</strong></p>\n</blockquote>\n<h1>매개변수(Parameter)와 인수(Argument)</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p1<span class=\"token punctuation\">,</span> p2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 매개변수 p1, p2에 받은 인수 할당</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 undefined</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수에 인수 1 전달</span></code></pre></div>\n<h1>참고</h1>\n<ul>\n<li><a href=\"https://poiemaweb.com/\" target=\"_blank\" rel=\"nofollow\">PoiemaWeb</a></li>\n</ul>","frontmatter":{"page":"study-blog","categories":["JavaScript"],"date":"2022.08.07","title":"함수(Function)","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/javascript-function/"}},"staticQueryHashes":[],"slicesMap":{}}