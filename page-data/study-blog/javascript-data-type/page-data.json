{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/javascript-data-type/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>ES6 기준 7개의 타입 제공</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">구분</th>\n<th align=\"center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>원시 타입(Primitive Data Type)</strong><br/>- 변경 불가능한 값<br/>- pass-by-value (값에 의한 전달)</td>\n<td align=\"center\">number</td>\n<td>하나의 숫자 타입만 존재<br/>숫자 타입의 값: 배정밀도 64비트 부동소수점 형<br/>모든 수를 실수로 처리<br/></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"center\">string</td>\n<td>유사 배열: 인덱스로 접근 가능 (인덱스로 변경 X)<br/>문자열 재할당 가능</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"center\">boolean</td>\n<td>논리적 참/거짓</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"center\">undefined</td>\n<td>자바스크립트 엔진에 의해 초기화된 값<br/>선언 이후 값을 할당하지 않은 변수에 접근 / 존재하지 않는 객체 프로퍼티에 접근</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"center\">null</td>\n<td>의도적으로 변수에 값이 없다는 것을 명시할 때 사용<br/>설계상 오류로 object 타입으로 잡힘 → 일치 연산자로 타입 확인 필요</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"center\">symbol</td>\n<td>이름의 충돌 위험 없는 유일한 객체 프로퍼티 키 생성 시 사용</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>객체 타입(Object/Reference type)</strong><br/>- 원시 타입을 제외한 나머지 값 모두 객체 (배열, 함수 정규표현식 등)<br/>- pass-by-reference (참조에 의한 전달)</td>\n<td align=\"center\">object</td>\n<td>데이터와 그 데이터에 관련한 동작(절차, 방법, 기능)을 모두 포함할 수 있는 개념적 존재</td>\n</tr>\n</tbody>\n</table>\n<h1>동적 타이핑(Dynamic Typing)</h1>\n<p>변수의 타입 지정 없이 값이 할당되는 과정에서 값의 타입에 의해 자동으로 타입이 결정</p>\n<p>같은 변수에 여러 타입의 값을 할당 가능</p>\n<h1>참고</h1>\n<ul>\n<li><a href=\"https://poiemaweb.com/\" target=\"_blank\" rel=\"nofollow\">PoiemaWeb</a></li>\n</ul>","frontmatter":{"page":"study-blog","categories":["JavaScript"],"date":"2022.08.04","title":"데이터 타입(Data type)","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/javascript-data-type/"}},"staticQueryHashes":[],"slicesMap":{}}