{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/react-hooks/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>use로 시작하는 함수</p>\n<p>호출 위치에 제약이 있는 특별한 유형의 재사용 가능한 UI 로직</p>\n<ul>\n<li>\n<p>규칙</p>\n<ul>\n<li>\n<p>최상위 레벨에서만 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ✅ 함수 컴포넌트의 최상위 레벨에서 사용</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ✅ 커스텀 Hook의 최상위 레벨에서 사용</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>조건문, 반복문, return 문 이후, 이벤트 핸들러, 클래스 컴포넌트, 중첩 함수, try/catch/finally 블록 내부에서 호출 X</p>\n</li>\n<li>\n<p>React 함수에서만 호출</p>\n<p>일반 함수에서 호출 X</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1>State Hooks</h1>\n<p>컴포넌트가 사용자 입력과 같은 정보 기억 가능</p>\n<h2>useState</h2>\n<p>컴포넌트에 state 변수 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>배열 구조 분해를 통해 변수 이름 지정</p>\n</li>\n<li>\n<p>set 함수는 다음 렌더링에 대한 state 변수만 업데이트</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Robin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아직 \"Taylor\"입니다!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>state가 스냅샷처럼 동작하기 때문에 이미 실행 중인 코드의 state는 변경되지 않음</p>\n</li>\n<li>\n<p>최적화</p>\n<p>state 변경 시 이전 값과 동일한 경우 리렌더링 X</p>\n<p><code class=\"language-text\">Object.is()</code>를 통해 비교</p>\n</li>\n</ul>\n<h1>Context Hooks</h1>\n<p>멀리 있는 부모 컴포넌트로부터 props로 전달하지 않으면서 정보를 받을 수 있음</p>\n<h2>useContext</h2>\n<p>컴포넌트에서 context를 읽고 구독 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>SomeContext<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>매개변수</p>\n<ul>\n<li>SomeContext : <code class=\"language-text\">createContext()</code>로 생성한 context</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">useContext()</code>를 호출한 컴포넌트의 상위에서 가장 가까운 <code class=\"language-text\">&lt;Context.Provider></code>를 찾아 context 값을 결정 (호출한 컴포넌트 내부의 Provider는 고려 X)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext<span class=\"token punctuation\">,</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 컨텍스트 생성</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">,</span> setTheme<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Sign up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Provider에서 전달한 dark가 값으로 결정됨</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>context 값을 변경하면 해당 context를 사용하는 모든 컴포넌트가 리렌더링</p>\n</li>\n</ul>\n<h1>Effect Hooks</h1>\n<p>컴포넌트를 외부 시스템에 연결하고 동기화 가능</p>\n<blockquote>\n<p><strong>외부 시스템(extenal)</strong></p>\n<p>React에 의해 제어되지 않는 모든 코드</p>\n<p>ex) 네트워크, 브라우저 DOM, 애니메이션, 다른 UI 라이브러리를 사용하여 작성된 위젯, 기타 React가 아닌 코드</p>\n</blockquote>\n<h2>useEffect</h2>\n<p>컴포넌트를 외부 시스템과 동기화</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>setup<span class=\"token punctuation\">,</span> dependencies<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>매개변수</p>\n<ul>\n<li>\n<p>setup</p>\n<ul>\n<li>설정 함수 : 외부 시스템과 연결하는 설정 코드가 포함된 함수</li>\n<li>정리(clean up) 함수 : 외부 시스템과 연결을 해제하는 정리 코드가 포함된 함수</li>\n</ul>\n</li>\n<li>\n<p>dependencies</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">설정 방식</th>\n<th align=\"center\">동작</th>\n<th align=\"center\">예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">의존성 배열 전달 X</td>\n<td align=\"center\">모든 렌더링/리렌더링 시 실행</td>\n<td align=\"center\"><code class=\"language-text\">useEffect(() => { ... });</code></td>\n</tr>\n<tr>\n<td align=\"center\">빈 의존성 배열 전달</td>\n<td align=\"center\">초기 렌더링 시 한 번 실행</td>\n<td align=\"center\"><code class=\"language-text\">useEffect(() => { ... }, []);</code></td>\n</tr>\n<tr>\n<td align=\"center\">의존성 배열 전달</td>\n<td align=\"center\">초기 렌더링과 의존성 값 변경 시 실행<br /><code class=\"language-text\">Object.is()</code>를 통해 비교</td>\n<td align=\"center\"><code class=\"language-text\">useEffect(() => { ... }, [a, b]);</code></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p>작동 방식</p>\n<ol>\n<li>초기 렌더링 시 설정 코드 동작</li>\n<li>의존성 값 변경 시 아래 동작 수행\n<ul>\n<li>정리 코드가 이전의 props/state와 함께 실행</li>\n<li>이후, 설정 코드가 새로운 props/state와 함께 실행</li>\n</ul>\n</li>\n<li>컴포넌트가 화면에서 제거된 후 정리 코드 실행</li>\n</ol>\n</li>\n<li>\n<p>외부 시스템과 연결할 필요 없다면 Effect 사용할 필요 없을 수 있음</p>\n</li>\n<li>\n<p>Effect 내부에서 데이터 페칭하는 것은 인기 있는 방법이지만, 네트워크 폭포 효과 등 단점이 존재 ⇒ 오픈소스 솔루션(React Query, useSWR 등) 사용 고려</p>\n</li>\n</ul>\n<h2>useLayoutEffect</h2>\n<p>브라우저가 화면을 다시 그리기 전에 실행되는 useEffect</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span>setup<span class=\"token punctuation\">,</span> dependencies<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>작동 방식</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 툴팁 예시</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tooltipHeight<span class=\"token punctuation\">,</span> setTooltipHeight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아직 실제 높이 모름</span>\n\n  <span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> height <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTooltipHeight</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실제 높이를 알았으니 다시 렌더링</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...아래에 올 렌더링 로직에서 tooltipHeight를 사용...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>Tooltip은 초기화된 값인 tooltipHeight = 0으로 렌더링 (툴팁이 잘못된 위치에 있을 수 있음)</li>\n<li>React가 이 툴팁을 DOM에 배치하고 useLayoutEffect 안의 코드를 실행</li>\n<li>툴팁의 높이를 계산하고 바로 다시 렌더링</li>\n<li>Tooltip이 실제 높이 값을 가진 tooltipHeight로 렌더링 (따라서 툴팁이 올바른 위치에 배치)</li>\n<li>React가 DOM에서 이를 업데이트하고 브라우저가 툴팁을 표시</li>\n</ol>\n</li>\n<li>\n<p>두 번의 렌더링과 브라우저를 막는 것 → 성능 저하 ⇒ useEffect 사용 권장</p>\n</li>\n</ul>\n<h1>Performance Hooks</h1>\n<p>리렌더링 성능 최적화 → 불필요한 작업을 건너뛰는 것 ⇒ memoization (캐싱)</p>\n<blockquote>\n<p><strong>memoization</strong></p>\n<p>이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술</p>\n</blockquote>\n<h2>useMemo</h2>\n<p>리렌더링 간에 계산 결과를 캐싱</p>\n<p>호출한 함수의 결과값을 캐싱</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> cachedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>calculateValue<span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>매개변수</p>\n<ul>\n<li>calculateValue : 캐싱하려는 값을 계산하는 함수</li>\n</ul>\n</li>\n<li>\n<p>작동 방식</p>\n<ol>\n<li>초기 렌더링에서 calculateValue를 호출한 결과 반환</li>\n<li>이후 모든 렌더링\n<ul>\n<li>dependencies 변경된 경우 : calculateValue를 다시 호출하고 반환된 값 저장</li>\n<li>dependencies 변경되지 않은 경우 : 마지막 렌더링에서 저장된 값 반환</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>React는 캐싱된 값을 버려야 할 특별한 이유가 없으면 버리지 않음</p>\n</li>\n<li>\n<p>코드에 소요된 시간 측정 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filter array'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> visibleTodos <span class=\"token operator\">=</span> <span class=\"token function\">filterTodos</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filter array'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>1ms 이상인 경우 메모하는 것이 좋음</p>\n<p>네트워크 스로틀링을 통해 성능 테스트를 하는 것이 좋음 (Chrome 옵션 제공)</p>\n<blockquote>\n<p><strong>네트워크 스로틀링(Network throttling)</strong></p>\n<p>의도적으로 인터넷 속도를 늦추는 것</p>\n<p>낮은 대역폭 상태를 에뮬레이션하는 데 사용</p>\n</blockquote>\n<p>개발 환경에선 가장 정확한 결과가 아닐 수 있음</p>\n</li>\n<li>\n<p>메모이제이션이 유용한 경우</p>\n<ul>\n<li>\n<p>계산이 눈에 띄게 느리고 의존성이 거의 변경되지 않는 경우</p>\n</li>\n<li>\n<p>의존성이 동일하지 않은 경우에만 컴포넌트를 다시 렌더링하고 싶은 경우 ⇒ memo 사용</p>\n<blockquote>\n<p><strong>memo</strong></p>\n<p>컴포넌트의 props가 변경되지 않은 경우 리렌더링을 건너뛸 수 있음</p>\n<p>부모 컴포넌트가 리렌더링 되어도 props가 변경되지 않았다면 리렌더링 X</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> MemoizedComponent <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>SomeComponent<span class=\"token punctuation\">,</span> arePropsEqual<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>성능을 최적화하는 것이지 보장하지 않기 때문에 리렌더링 가능성 존재</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>계산한 결과값을 나중에 어떤 Hook의 의존성으로 사용할 경우</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>useCallback</h2>\n<p>리렌더링 간에 함수 정의를 캐싱</p>\n<p>함수 자체를 캐싱</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> cachedFn <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>매개변수</p>\n<ul>\n<li>fn : 캐싱할 함수</li>\n</ul>\n</li>\n<li>\n<p>작동 방식</p>\n<ol>\n<li>초기 렌더링에서 전달한 fn 함수 그대로 반환</li>\n<li>이후 모든 렌더링\n<ul>\n<li>dependencies 변경된 경우 : 현재 렌더링 중에 전달한 fn 함수 반환</li>\n<li>dependencies 변경되지 않은 경우 : 마지막 렌더링에서 저장된 fn 함수 반환</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h1>참고</h1>\n<ul>\n<li><a href=\"https://react.dev/reference/react/hooks\" target=\"_blank\" rel=\"nofollow\">Built-in React Hooks – React</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98\" target=\"_blank\" rel=\"nofollow\">메모이제이션 - 위키백과, 우리 모두의 백과사전</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Network_throttling\" target=\"_blank\" rel=\"nofollow\">Network throttling - MDN Web Docs Glossary: Definitions of Web-related terms | MDN</a></li>\n</ul>","frontmatter":{"page":"study-blog","categories":["React"],"date":"Invalid date","title":"Hooks","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/react-hooks/"}},"staticQueryHashes":[],"slicesMap":{}}