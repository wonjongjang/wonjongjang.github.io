{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/javascript-array/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>여러 개의 값을 순차적으로 나열한 자료구조</p>\n<h1>자바스크립트 배열</h1>\n<ul>\n<li>\n<p>특징</p>\n<ul>\n<li>\n<p>객체 타입 (배열 타입 X)</p>\n<p>배열은 객체지만 일반 객체와는 구별되는 특징 존재</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">객체</th>\n<th align=\"center\">배열</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">구조</td>\n<td align=\"center\">프로퍼티 키, 프로퍼티 값</td>\n<td align=\"center\">인덱스, 요소</td>\n</tr>\n<tr>\n<td align=\"center\">값의 참조</td>\n<td align=\"center\">프로퍼티 키</td>\n<td align=\"center\">인덱스</td>\n</tr>\n<tr>\n<td align=\"center\">값의 순서</td>\n<td align=\"center\">X</td>\n<td align=\"center\">O</td>\n</tr>\n<tr>\n<td align=\"center\">length 프로퍼티</td>\n<td align=\"center\">X</td>\n<td align=\"center\">O</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>배열의 요소를 위한 각각의 메모리 공간이 동일한 크기를 갖지 않아도 됨</p>\n</li>\n<li>\n<p>배열의 요소가 연속적으로 이어져 있지 않을 수 있음 → 희소배열(sparse array)</p>\n<blockquote>\n<p>희소 배열의 length > 희소 배열의 실제 요소 개수</p>\n<p>문법적으로 희소 배열을 허용하지만 사용하지 않는 것이 좋음 → 같은 타입의 요소를 연속적으로 위치시키는 것이 최선</p>\n</blockquote>\n</li>\n</ul>\n<p>⇒ 일반적인 배열의 동작을 흉내 낸 특수한 객체</p>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>해시 테이블로 구현된 객체이므로 인덱스로 요소에 접근할 때 일반적인 배열보다 성능↓</li>\n</ul>\n</li>\n<li>\n<p>장점</p>\n<ul>\n<li>요소를 삽입/삭제할 때 일반적인 배열보다 성능↑</li>\n</ul>\n</li>\n</ul>\n<h1>배열 고차 함수</h1>\n<blockquote>\n<p><strong>고차 함수(Higher-Order Function, HOF)</strong></p>\n<p>함수를 인수로 전달받거나 함수를 반환하는 함수</p>\n<p>외부 상태의 변경이나 가변 데이터를 피하고 불변성을 지향하는 함수형 프로그래밍에 기반</p>\n</blockquote>\n<blockquote>\n<p><strong>함수형 프로그래밍</strong></p>\n<p>순수 함수와 보조 함수의 조합을 통해 로직 내에 존재하는 조건문과 반복문을 제거하여 복잡성을 해결하고, 변수의 사용을 억제하여 상태 변경을 피하려는 프로그래밍 패러다임</p>\n</blockquote>\n<h2>Array.prototype.map</h2>\n<p>자신을 호출한 배열의 모든 요소를 순회하며 인수로 전달받은 콜백 함수를 반복 호출</p>\n<p>콜백 함수의 반환값들로 구성된 새로운 배열 반환 (원본 배열 변경 X)</p>\n<p><code class=\"language-text\">호출한 배열의 length = 생성하여 반환하는 새로운 배열의 length</code> (1:1 매핑)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// map 메서드의 콜백 함수에는 3개(요소값, 인덱스, this)의 인수를 전달</span>\n<span class=\"token keyword\">const</span> roots <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">요소값: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 인덱스: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, this: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n  요소값: 1, 인덱스: 0, this: [1,4,9]\n  요소값: 4, 인덱스: 1, this: [1,4,9]\n  요소값: 9, 인덱스: 2, this: [1,4,9]\n*/</span>\n\n<span class=\"token comment\">// 새로운 배열 반환</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>roots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// [ 1, 2, 3 ]</span>\n<span class=\"token comment\">// 원본 배열 변경 X</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [ 1, 4, 9 ]</span></code></pre></div>\n<h2>Array.prototype.filter</h2>\n<p>자신을 호출한 배열의 모든 요소를 순회하며 인수로 전달받은 콜백 함수를 반복 호출</p>\n<p>콜백 함수의 반환값이 true인 요소로만 구성된 새로운 배열 반환 (원본 배열 변경 X)</p>\n<p><code class=\"language-text\">호출한 배열의 length >= 생성하여 반환하는 새로운 배열의 length</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// filter 메서드의 콜백 함수에는 3개(요소값, 인덱스, this)의 인수를 전달</span>\n<span class=\"token keyword\">const</span> odds <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">요소값: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 인덱스: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, this: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n  요소값: 1, 인덱스: 0, this: [1,2,3,4,5]\n  요소값: 2, 인덱스: 1, this: [1,2,3,4,5]\n  요소값: 3, 인덱스: 2, this: [1,2,3,4,5]\n  요소값: 4, 인덱스: 3, this: [1,2,3,4,5]\n  요소값: 5, 인덱스: 4, this: [1,2,3,4,5]\n*/</span>\n\n<span class=\"token comment\">// 새로운 배열 반환</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>odds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">// [ 1, 3, 5 ]</span>\n<span class=\"token comment\">// 원본 배열 변경 X</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [ 1, 2, 3, 4, 5 ]</span></code></pre></div>\n<h2>Array.prototype.reduce</h2>\n<p>자신을 호출한 배열의 모든 요소를 순회하며 인수로 전달받은 콜백 함수를 반복 호출</p>\n<p>하나의 결과값을 만들어 반환 (원본 배열 변경 X)</p>\n<p>초기값은 옵션이라 생략 가능하지만, 언제나 초기값을 전달하는 것이 안전</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  reduce 메서드는 2개(콜백 함수, 초기값)의 인수를 전달\n  const sum = numbers.reduce(콜백 함수, 초기값);\n\n  reduce 메서드의 콜백 함수에는 4개(콜백 함수의 이전 반환값, 요소값, 인덱스, this)의 인수를 전달\n*/</span>\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">accumulator: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accumulator<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, currentValue: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, this: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 콜백 함수의 반환값: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accumulator <span class=\"token operator\">+</span> currentValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> accumulator <span class=\"token operator\">+</span> currentValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n  accumulator: 0, currentValue: 1, index: 0, this: [1,2,3,4], 콜백 함수의 반환값: 1\n  accumulator: 1, currentValue: 2, index: 1, this: [1,2,3,4], 콜백 함수의 반환값: 3\n  accumulator: 3, currentValue: 3, index: 2, this: [1,2,3,4], 콜백 함수의 반환값: 6\n  accumulator: 6, currentValue: 4, index: 3, this: [1,2,3,4], 콜백 함수의 반환값: 10\n*/</span>\n\n<span class=\"token comment\">// 하나의 결과값 반환</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 원본 배열 변경 X</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [ 1, 2, 3, 4 ]</span></code></pre></div>\n<h1>참고</h1>\n<ul>\n<li>이웅모. 「모던 자바스크립트 Deep Dive」. 위키북스. 2020</li>\n</ul>","frontmatter":{"page":"study-blog","categories":["JavaScript"],"date":"Invalid date","title":"배열(Array)","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/javascript-array/"}},"staticQueryHashes":[],"slicesMap":{}}