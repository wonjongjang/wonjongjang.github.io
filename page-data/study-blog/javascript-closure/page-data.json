{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/javascript-closure/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>함수를 일급 객체로 취급하는 함수형 프로그래밍 언어의 중요한 특성 (자바스크립트 고유 개념 X)</p>\n<p>함수와 그 함수가 선언된 렉시컬 환경(Lexical environment)과의 조합</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">innerFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 10</span>\n  <span class=\"token function\">innerFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>outerFunc 함수 내부에서 정의되고 호출된 innerFunc1 → outerFunc의 x에 접근 가능</p>\n<p>중첩 함수 innerFunc1의 상위 스코프는 outerFunc의 스코프</p>\n</li>\n<li>\n<p>outerFunc 함수 내부에서 정의되지 않고 호출된 innerFunc2 → outerFunc의 x에 접근 불가능</p>\n</li>\n</ul>\n<p>⇒ 자바스크립트가 렉시컬 스코프를 따르는 언어이기 때문에 발생하는 현상</p>\n<blockquote>\n<p><strong>렉시컬 스코프(Lexical scope) = 정적 스코프</strong></p>\n<p>함수를 어디서 호출하는지가 아니라 어디에 선언하였는지에 따라 결정</p>\n<p>상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 결정</p>\n</blockquote>\n<blockquote>\n<p><strong>상위 스코프</strong></p>\n<p>함수 정의가 위치하는 스코프</p>\n<p>[[Environment]]에 저장된 현재 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조</p>\n</blockquote>\n<blockquote>\n<p><strong>[[Environment]]</strong></p>\n<p>함수 객체의 내부 슬롯</p>\n<p>상위 스코프의 참조(자신이 정의된 환경)를 저장</p>\n<p>이를 통해 함수 객체는 자신이 존재하는 한 상위 스코프를 기억</p>\n</blockquote>\n<p><img src=\"/f4af8300b6e350928b79e51b310dcbcc/closure.gif\" alt=\"post\"></p>\n<p>outerFunc 함수는 중첩 함수 innerFunc을 반환하고 생명 주기 마감(outerFunc 실행 컨텍스트가 스택에서 제거)</p>\n<p>outerFunc의 지역 변수 x 또한 유효하지 않게 되어야 하지만 10이 출력되고 있음</p>\n<p>이처럼 외부 함수보다 중첩 함수가 더 오래 유지되는 경우, 중첩 함수는 이미 생명 주기가 종료한 외부 함수의 변수 참조 가능</p>\n<p>⇒ 이러한 중첩 함수가 클로저 (중첩 함수가 상위 스코프의 식별자를 참조하면서 외부 함수보다 더 오래 유지되는 경우)</p>\n<p>innerFunc의 [[Environment]] 내부 슬롯에 outerFunc 함수의 렉시컬 환경을 상위 스코프로서 저장하고 있기에 가능</p>\n<p>outerFunc 함수의 실행 컨텍스트는 스택에서 제거되지만 outerFunc 함수의 렉시컬 환경까지 소멸 X (가비지 컬렉터는 누군가가 참조하고 있는 메모리 공간을 함부로 해제하지 않음)</p>\n<p>클로저는 자유 변수에 묶여있는 함수</p>\n<blockquote>\n<p><strong>자유 변수(free variable)</strong></p>\n<p>클로저에 의해 참조되는 상위 스코프의 변수 (위 예제의 경우 outerFunc 함수의 x 변수)</p>\n</blockquote>\n<h1>클로저 활용</h1>\n<ul>\n<li>\n<p>상태(state)를 안전하게 변경 및 유지</p>\n<ul>\n<li>\n<p>상태를 안전하게 은닉</p>\n</li>\n<li>\n<p>특정 함수에게만 상태 변경 허용</p>\n</li>\n</ul>\n</li>\n<li>\n<p>캡슐화와 정보 은닉</p>\n</li>\n</ul>\n<h1>참고</h1>\n<ul>\n<li>이웅모. 「모던 자바스크립트 Deep Dive」. 위키북스. 2020</li>\n<li><a href=\"https://poiemaweb.com/js-closure\" target=\"_blank\" rel=\"nofollow\">PoiemaWeb</a></li>\n<li><a href=\"https://ui.dev/javascript-visualizer\" target=\"_blank\" rel=\"nofollow\">JavaScript Visualizer</a></li>\n</ul>","frontmatter":{"page":"study-blog","categories":["JavaScript"],"date":"Invalid date","title":"클로저(Closure)","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/javascript-closure/"}},"staticQueryHashes":[],"slicesMap":{}}