{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/data-structure/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1>자료 구조(Data structure)</h1>\n<p>자료를 기억장치의 공간 내에 저장하는 방법, 저장된 자료 간의 관계, 처리 방법 등을 연구 분석하는 것</p>\n<ul>\n<li>\n<p>분류</p>\n<ul>\n<li>\n<p>선형 구조(Linear Structure)</p>\n<ul>\n<li>배열(Array)</li>\n<li>선형 리스트(Liner List)\n<ul>\n<li>연속 리스트(Contiguous List)</li>\n<li>연결 리스트(Linked List)</li>\n</ul>\n</li>\n<li>스택(Stack)</li>\n<li>큐(Queue)</li>\n<li>데크(Deque)</li>\n</ul>\n</li>\n<li>\n<p>비선형 구조(Non-Linear Structure)</p>\n<ul>\n<li>트리(Tree)</li>\n<li>그래프(Graph)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>배열(Array)</h2>\n<p>동일한 자료형의 데이터들이 같은 크기로 나열되어 순서를 갖고 있는 집합</p>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>\n<p>데이터마다 동일한 이름의 변수 사용 → 처리 간편</p>\n</li>\n<li>\n<p>반복적인 데이터 처리 수월</p>\n</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>정적인 자료 구조 → 기억장소 추가 어려움, 데이터 삭제 시 메모리 낭비 발생</li>\n</ul>\n</li>\n<li>\n<p>특징</p>\n<ul>\n<li>첨자 이용 (n개의 첨자 → n차원 배열)</li>\n</ul>\n</li>\n</ul>\n<h2>선형 리스트(Liner List)</h2>\n<p>일정한 순서에 의해 나열된 자료 구조</p>\n<ul>\n<li>\n<p>구분</p>\n<ul>\n<li>\n<p>연속 리스트(Contiguous List) : 배열</p>\n</li>\n<li>\n<p>연결 리스트(Linked List) : 포인터</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>스택(Stack)</h2>\n<p>\b후입선출(LIFO; Last In First Out)</p>\n<h2>큐(Queue)</h2>\n<p>선입선출(FIFO; First In First Out)</p>\n<h2>그래프(Graph)</h2>\n<p>정점 V(Vertex)와 간선 E(Edge)의 집합으로 구성</p>\n<p><code class=\"language-text\">G = (V, E)</code></p>\n<ul>\n<li>\n<p>구분 - 방향성 유무</p>\n<ul>\n<li>\n<p>방향 그래프</p>\n</li>\n<li>\n<p>무방향 그래프</p>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"page":"study-blog","categories":["Software-Development"],"date":"2023.04.11","title":"자료 구조","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/data-structure/"}},"staticQueryHashes":[],"slicesMap":{}}