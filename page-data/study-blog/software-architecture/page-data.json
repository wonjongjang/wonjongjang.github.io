{"componentChunkName":"component---src-templates-post-template-tsx","path":"/study-blog/software-architecture/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>소프트웨어의 골격이 되는 기본 구조</p>\n<p>소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템의 구조/구조체</p>\n<h1>기본 원리</h1>\n<h2>모듈화(Modularity)</h2>\n<p>시스템의 기능을 모듈 단위로 나누는 것</p>\n<ul>\n<li>장점\n<ul>\n<li>재사용성↑</li>\n<li>인터페이스 단순</li>\n<li>효율적인 관리</li>\n<li>오류의 파급 효과 최소화</li>\n</ul>\n</li>\n</ul>\n<h2>추상화(Abstraction)</h2>\n<p>문제의 전체적이고 포괄적인 개념을 설계한 후 차례로 세분화하여 구체화시켜 나가는 것</p>\n<ul>\n<li>장점\n<ul>\n<li>여러가지 요인 테스트 가능</li>\n<li>최소의 비용으로 실제 상황에 대처 가능</li>\n<li>시스템의 구조 및 구성을 대략적으로 파악 가능</li>\n</ul>\n</li>\n</ul>\n<h2>단계적 분해(Stepwise Refinement)</h2>\n<p>하향식 설계 전략</p>\n<p>문제를 상위의 중요 개념으로부터 하위의 개념으로 구체화시키는 분할 기법</p>\n<h2>정보 은닉(Information Hiding)</h2>\n<p>한 모듈 내부에 포함된 절차와 자료들의 정보가 감추어져 다른 모듈이 접근/변경하지 못하도록 하는 기법</p>\n<ul>\n<li>장점\n<ul>\n<li>모듈을 독립적으로 수행 가능</li>\n<li>한 모듈 변경 시 다른 모듈 영향 X → 수정, 시험, 유지보수 용이</li>\n</ul>\n</li>\n</ul>","frontmatter":{"page":"study-blog","categories":["Software-Design"],"date":"2023.03.02","title":"소프트웨어 아키텍처(Software Architecture)","subTitle":null}}}]}},"pageContext":{"slug":"/study-blog/software-architecture/"}},"staticQueryHashes":[],"slicesMap":{}}