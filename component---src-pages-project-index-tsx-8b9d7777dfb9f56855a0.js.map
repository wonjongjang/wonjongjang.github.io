{"version":3,"file":"component---src-pages-project-index-tsx-8b9d7777dfb9f56855a0.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Project/ProjectItem/index.tsx","webpack://gatsby-starter-default/./src/components/Project/ProjectList/index.tsx","webpack://gatsby-starter-default/./src/pages/project/index.tsx"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\n\nimport styled from 'styled-components'\n\ninterface ProjectItemProps {\n  title: string\n  subTitle: string\n  categories: string[]\n  startDate: string\n  endDate: string\n  page: string\n  link: string\n  thumbnail: {\n    childImageSharp: {\n      gatsbyImageData: IGatsbyImageData\n    }\n  }\n}\n\nexport default function ProjectItem({\n  title,\n  subTitle,\n  categories,\n  startDate,\n  endDate,\n  page,\n  link,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n}: ProjectItemProps) {\n  return (\n    <ProjectItemWrapper>\n      <CardLink to={link}>\n        <Card>\n          <TitleWrapper>\n            <Title>{title}</Title>\n            <SubTitle>{subTitle}</SubTitle>\n          </TitleWrapper>\n          <DateWrapper>\n            {startDate} ~ {endDate}\n          </DateWrapper>\n          <Category>\n            {categories?.map((category, i) => (\n              <CategoryItem key={i}>{category}</CategoryItem>\n            ))}\n          </Category>\n          <ImageWrapper>\n            <GatsbyImage\n              image={gatsbyImageData}\n              alt=\"\"\n              objectFit=\"contain\"\n              imgStyle={{ borderRadius: '0 0 14px 14px' }}\n            />\n          </ImageWrapper>\n        </Card>\n      </CardLink>\n    </ProjectItemWrapper>\n  )\n}\n\nconst ImageWrapper = styled.div`\n  margin: 14px -24px 0;\n  height: 223px;\n  background: #ffffff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0 0 14px 14px;\n`\n\nconst DateWrapper = styled.div`\n  overflow: hidden;\n  height: 19px;\n  margin-top: 14px;\n  font-size: 13px;\n  line-height: 19px;\n  color: ${props => props.theme.colors.boxTextColor};\n\n  @media screen and (min-width: 1439px) {\n    font-size: 14px;\n    line-height: 20px;\n  }\n`\n\nconst SubTitle = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n  font-size: 16px;\n  line-height: 19px;\n\n  @media screen and (min-width: 767px) {\n    font-size: 14px;\n    line-height: 16px;\n  }\n  @media screen and (min-width: 1439px) {\n    font-size: 18px;\n    line-height: 20px;\n  }\n`\n\nconst Title = styled.div`\n  font-weight: bold;\n  font-size: 26px;\n  line-height: 36px;\n\n  @media screen and (min-width: 767px) {\n    font-size: 22px;\n    line-height: 32px;\n  }\n  @media screen and (min-width: 1439px) {\n    font-size: 30px;\n    line-height: 40px;\n  }\n`\n\nconst TitleWrapper = styled.div`\n  height: 72px;\n\n  @media screen and (min-width: 767px) {\n    height: 64px;\n  }\n  @media screen and (min-width: 1439px) {\n    height: 80px;\n  }\n`\n\nconst CategoryItem = styled.li`\n  list-style: none;\n  height: 18px;\n  font-size: 14px;\n  line-height: 13px;\n  padding: 2px 6px;\n  border-radius: 4px;\n  color: ${props => props.theme.colors.textColor};\n  background: ${props => props.theme.colors.boxTabColor};\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  @media ${props => props.theme.device.laptop} {\n    font-size: 13px;\n  }\n  @media ${props => props.theme.device.tablet} {\n    font-size: 12px;\n  }\n`\n\nconst Category = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1px;\n  height: 36px;\n  overflow: hidden;\n`\n\nconst Card = styled.div`\n  position: relative;\n  padding: 25px 24px 0;\n  border-radius: 14px;\n  cursor: pointer;\n  box-shadow: 4px 12px 30px 6px rgb(0 0 0 / 9%);\n  transition: 0.3s box-shadow;\n  &:hover {\n    box-shadow: 4px 12px 30px 6px rgb(0 0 0 / 18%);\n    transform: translateY(-2px);\n  }\n  background-color: ${props => props.theme.colors.boxColor};\n`\n\nconst CardLink = styled(Link)``\n\nconst ProjectItemWrapper = styled.li`\n  list-style: none;\n  margin-top: 36px;\n  width: 100%;\n  padding: 0;\n\n  @media screen and (min-width: 767px) {\n    padding: 0 18px;\n  }\n  @media screen and (min-width: 1024px) {\n    padding: 0 15px;\n  }\n  @media screen and (min-width: 1439px) {\n    padding: 0 18px;\n  }\n`\n","import React from 'react'\n\nimport styled from 'styled-components'\n\nimport { ItemType } from 'etc/types'\nimport useInfiniteScroll, {\n  useInfiniteScrollType,\n} from 'hooks/useInfiniteScroll'\nimport ProjectItem from '../ProjectItem'\n\ninterface ProjectListProps {\n  posts: ItemType[]\n  selectedCategory: string\n}\n\nexport default function ProjectList({\n  selectedCategory,\n  posts,\n}: ProjectListProps) {\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\n    selectedCategory,\n    posts,\n  )\n\n  return (\n    <ProjectListWrapper ref={containerRef}>\n      {postList.map(\n        ({\n          node: {\n            id,\n            fields: { slug },\n            frontmatter,\n          },\n        }: ItemType) => (\n          <ProjectItem {...frontmatter} link={slug} key={id} />\n        ),\n      )}\n    </ProjectListWrapper>\n  )\n}\n\nconst ProjectListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n\n  @media screen and (min-width: 767px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media screen and (min-width: 1024px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport queryString, { ParsedQuery } from 'query-string'\n\nimport { FadeInAnimation, PageDescript, PageTitle, Section } from 'pages'\n\nimport { I_PostItem } from 'etc/types'\nimport CategoryList, { CategoryListProps } from 'components/CategoryList'\nimport Layout from 'components/Layout'\nimport ProjectList from 'components/Project/ProjectList'\n\ninterface ProjectProps {\n  location: {\n    search: string\n    href: string\n  }\n  data: {\n    allMarkdownRemark: {\n      edges: I_PostItem[]\n    }\n  }\n}\n\nexport default function Project({\n  location: { search, href },\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}: ProjectProps) {\n  const parsed: ParsedQuery<string> = queryString.parse(search)\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All'\n      : parsed.category\n\n  // project에 해당하는 게시물\n  const pageEdges = edges.filter(\n    edge => edge.node.frontmatter.page === 'project',\n  )\n\n  // project에 해당하는 게시물 중 카테고리 별 개수\n  const categoryList = useMemo(\n    () =>\n      pageEdges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: I_PostItem,\n        ) => {\n          categories?.forEach(category => {\n            if (list[category] === undefined) list[category] = 1\n            else list[category]++\n          })\n\n          list['All']++\n\n          return list\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <Layout title=\"Project\" description=\"작업한 프로젝트\" url={href}>\n      <FadeInAnimation>\n        <PageTitle>Project</PageTitle>\n        <PageDescript>작업한 프로젝트</PageDescript>\n      </FadeInAnimation>\n      <Section>\n        {/* 카테고리 */}\n        <CategoryList\n          page={pageEdges[0].node.frontmatter.page}\n          selectedCategory={selectedCategory}\n          categoryList={categoryList}\n        />\n        {/* 프로젝트 목록 */}\n        <ProjectList selectedCategory={selectedCategory} posts={pageEdges} />\n      </Section>\n    </Layout>\n  )\n}\n\nexport const getProjectList = graphql`\n  query getProjectList {\n    allMarkdownRemark(\n      sort: {\n        order: DESC\n        fields: [frontmatter___startDate, frontmatter___title]\n      }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            page\n            categories\n            startDate(formatString: \"YYYY.MM.DD\")\n            endDate(formatString: \"YYYY.MM.DD\")\n            title\n            subTitle\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["ProjectItem","title","subTitle","categories","startDate","endDate","page","link","thumbnail","childImageSharp","gatsbyImageData","React","ProjectItemWrapper","CardLink","to","Card","TitleWrapper","Title","SubTitle","DateWrapper","Category","map","category","i","CategoryItem","key","ImageWrapper","GatsbyImage","image","alt","objectFit","imgStyle","borderRadius","styled","displayName","componentId","props","theme","colors","boxTextColor","textColor","boxTabColor","device","laptop","tablet","boxColor","Link","ProjectList","selectedCategory","posts","containerRef","postList","useInfiniteScroll","ProjectListWrapper","ref","_ref2","node","id","fields","slug","frontmatter","Project","location","search","href","data","allMarkdownRemark","edges","parsed","queryString","pageEdges","filter","edge","categoryList","useMemo","reduce","list","forEach","undefined","All","Layout","description","url","FadeInAnimation","PageTitle","PageDescript","Section","CategoryList"],"sourceRoot":""}